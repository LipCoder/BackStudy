


Session과 Application 객체는 똑같이 쓰이는데
같은거 아냐?
==> 전혀 다르다! 

각각에 맞는 사용처가 있다.

Application은 WebApp 내 서블릿 모두에게 공유한다.
(서버 컴퓨터 내 모두가 공유)

Session은 접속자마다 공간이 달라진다.
(서버에 요청하는 세션에 따라 각각 분류됨)

세션이란?
①망 환경에서 사용자 간 또는 컴퓨터 간의 대화를 위한 논리적 연결. 
②프로세스들 사이에서 통신을 하기 위해 메시지 교환을 통해 
 서로를 인식한 이후부터 통신을 마칠 때까지의 기간.


크롬에 새탭에 띄워도 같은 세션인 이유?
==> 크롬은 한 프로세스를 가지고 스레드를 나눠 실행되기 때문이다.
==> 스레드는 프로세스가 가지는 여러 흐름으로 
    각 스레드는 프로세스의 데이터를 공유할 수 있다.



# 웹 서버가 현재 사용자(Session)을 구분하는 방식

--------------------------------
WAS (Web Application Server)
[application]   [Session]
       |        [104]
       |        [103] [*107*]
    servlet     [102] [106]   <==== SID들
     (add)  --- [101] [105]

--------------------------------

브라우저  ----Add(SID 없음)---->   WAS
         <---(SID : 107)부여---
         ----Add(SID : 107)--->


한 컴퓨터가 2개의 브라우저를 이용하여 세션을 사용한다는 점에서 물리적으로는 하나이지만,
서버의 입장에서는 논리적인 세션을 사용하기 때문에 서로 다른 사용자로 본다.


# Session 키 확인

Request 패킷 헤더에 
Cookie 값이 JSESSIONID=1365E5A0E8D9E3E3353D3026441AD716라고 되어 있다.
서버는 JSESSIONID(SID) 를 이용하여 각 사용자를 식별하는 것이다.


# 세션 메소드

setAttribute, getAttribute 지정한 이름으로 객체를 설정 및 반환
*invalidate* 세션에서 사용되는 객체들을 바로 해제

setMaxInactiveInterval 세션 타임아웃을 정수(초)로 설정
isNew 세션이 새로 생성되었는지를 확인
getCreationTime 세션이 시작된 시간을 반환, 1970.1.1로 시작으로 하는 밀리 초
getLastAccessedTime 마지막 요청 시간, 1970.1.1을 시작으로 하는 밀리 초 