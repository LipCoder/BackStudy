* 클래스간의 관계 결정하기

class Circle extents Point {
    int r;
}
==> 원(Circle)은 점(Point)이다. - Circle is a Point

class Circle {
    Point c = new Point();
    int r;
}
==> 원은 점을 가지고 있다. - Circle has a Point

상속관계 '~은 ~이다' (is - a)
포함관계 '~은 ~을 가지고 있다' (has - a)


* 상속은 하나만 허용한다. 
==> 단 인터페이스의 경우는 여러개 상속 받을 수 있다.


* Object는 모든 클래스의 조상이다.


* 오버로딩 vs 오버라이딩
오버로딩 - 없는 함수를 만드는 것
오버라이딩 - 이미 만들어진 함수의 내용을 변경하는 것


# 패키지
-> 패키지란, 클래스의 묶음이다.

패키지 규칙
1. 하나의 소스파일에는 첫번째 문장으로 단 한 번의 패키지 선언만을 허용한다.
2. 모든 클래스는 반드시 하나의 패키지에 속해야 한다.
3. 패키지는 점(.)을 구분자로 하여 계층구조로 구성할 수 있다.
4. 패키지는 물리적으로 클래스 파일(.class)을 포함하는 하나의 디렉토리이다.


* import static을 이용하면 스태틱 멤버를 사용할때 생략이 가능해진다.

import static java.lang.Math.*;

// System.out.println(Math.random()); // 기존
System.out.println(random()); // 가능


# 제어자
final - 마지막의, 변경될 수 없는
(const 의미를 내포)


public > protected > (default) > private


# 다형성

자손타입 --> 조상타입 (업캐스팅) : 형변환 생략가능
자손타입 <-- 조상타입 (다운캐스팅) : 형변환 생략불가


# 인터페이스
interface 인터페이스이름 {
    [public static final] 타입 이름 = 값;
    [public abstract] 메서드이름 (매개변수목록);
}
public static final, public abstract --> 생략가능

* 인터페이스의 장점
- 개발시간을 단축시킬 수 있다.
- 표준화가 가능하다.
- 서로 관계없는 클래스들에게 관계를 맺어줄 수 있다.
- 독립적인 프로그래밍이 가능하다.

* 인터페이스 vs 추상클래스
추상클래스 : 부분적으로만 완성된 '미완성 설계도'
인터페이스 : 아무것도 없고 밑그림만 그려진 '기본 설계도'


# 내부 클래스 (inner class)
클래스 내에 선언되는 클래스가
사용빈도가 높지 않음

class A { // 외부 클래스
    ...
    class B { // 내부 클래스
        ...
    }
}

* 내부 클래스의 장점
- 내부 클래스에서 외부 클래스의 멤버들을 쉽게 접근할 수 있다.
- 코드의 복잡성을 줄일 수 있다. (캠슐화)


* public class
public 접근 제어자를 class앞에 추가하면, 
그 클래스의 이름은 현재 작성중인 자바 파일명과 동일해야한다.
하나의 자바 파일의 여러 클래스를 작성하는 경우 하나의 대표 클래스를
지정하고 파일명과 동일하게 하는 것이 코드 가독성에 도움이 된다.
사용자는 public 키워드를 통해 현재 소스코드가 어떤 자바 파일명으로 
구성되어 있는지를 예상할 수 있다. 
또한 public이 없는 경우 파일명과 일치하지 않다고 예상할 수 있다.

* abstract class
추상 클래스를 표현하기 위한 키워드이다.

* 익명 클래스
이름이 없는 클래스
클래스의 선언과 객체 생성을 동시에 하기 때문에 단 한번만 사용될 수 있고
오직 하나의 객체만을 생성할 수 있는 일회용 클래스이다.

new 조상클래스이름() {
    // 멤버 선언
}

또는

new 구현인터페이스이름() {
    // 멤버 선언
}
