아이템 2
생성자에 매개변수가 많다면 빌더를 고려하라.

정적 팩터리, 생성자에는 똑같은 제약이 하나 있다. 
선택적 매개변수가 많을 경우 적절히 대응이 어려움.

ex) 영양정보는 20개가 넘어가지만, 대다수 값이 0이다.

* 점층적 생성자 패턴(telescoping constructor pattern)
- 필수 매개변수만 받는 생성자
- 필수 매개변수
- 선택 매개변수 1개만 받는 생성자, 2개 받는 생성자...

ex) NutritionFacts.java

점층적 생성자 패턴도 쓸 수는 있지만... 
매개변수 개수가 많아지면 클라이어트 코드를 작성하거나 읽기 어렵다.
==> 버그 생성 가능성도 있음 (그것도 찾기 어려운...)
==> 순서가 조금만 바뀌어도 런타임 에러가 발생할 수 있음


* 자바 빈즈 패턴(JavaBeans pattern)
- 매개변수가 없는 생성자로 객체를 만든 후, 세터(setter) 메서드들을 호출해
  원하는 매개변수의 값을 설정하는 방식

ex) NutritionFacts2.java

하지만 이 패턴은 심각한 단점을 가지고 있다..
==> 자바빈즈 패턴에선 객체를 하나 만드려면 메서드를 여러 개 호출해야 함
==> 객체가 완전히 생성되기 전까지 일관성이 무너진 상태
    (버그 코드, 런타임 문제를 겪는 코드, 디버깅 어려움 등 문제발생)


** 솔루션 ==> 빌더 패턴
점층적 생성자 패턴 안전성 + 자바 빈즈 패턴의 가독성
==> 필요한 객체를 직접 만들기 + 필수 매개변수만으로 생성자를 호출
    + 세터 메서드를 호출해 선택 매개변수들을 설정

ex) NutritionFacts3.java

NutritionFacts3 클래스는 불변이며, 모든 매개변수의 기본값들은 한곳에 모아둔다.
빌더의 세터 메서드들은 빌더 자신을 반환하기 때문에 연쇄적으로 호출 할 수 있음 (메서드 체이닝, 플루언트 API)

빌더 패턴은 명명된 선택적 매개변수(named optional parameters)를 흉내 낸 것


<불변객체란...>
어떠한 변경도 허용하지 않는 객체
String 객체는 한번 만들어지면 절대 값을 바꿀 수 없는 구조 ==> 불변객체
불변식은 프로그램이 실행되는 동악, 정해진 기간 동안 반드시 만족해야 하는 조건

빌더 패턴은 계층적으로 설계된 클래스와 함께 쓰기 종음
--> 각 계층이 클래스에 관련 빌더를 멤버로 정의

- 계층적 빌더 예제
피자의 다양한 종류를 표현하는 계층구조의 루트 추상 클래스
ex) Pizza.java
    ==> NyPizza.java
    ==> Calzone.java


빌더 패턴은 상당히 유연하다. 빌더 객체 하나로 여러 객체를 순회하면서 만들 수 있고,
빌더에 넘기는 매개변수에 따라 다른 객체를 만들수도 있다.
특정 필드는 알아서 채우도록 할 수도 있다.

* 단점
빌더 패턴을 쓰려면 앞에 빌더부터 만들어줘야 한다. 
빌더 생성 비용은 크지 않지만 성능이 민감한 쪽에서는 문제가 될 수 있다.
코드가 장황하기 때문에 매개변수 4개 이상은 되어야 의미가 있다.
(API는 시간이 지날수록 매개변수가 많아지는 경향이 있음을 명시하자!)

애초에 생성자나 정적 팩터리 메서드 보다 빌더패턴으로 시작하는 편이 나을 때가 많다.


# 정리
생성자나 정적 팩터리가 처리해야 할 매개변수가 많은 경우 빌더 패턴을 선택하는 게 더 낫다.
매개변수 중 다수가 필수가 아니거나, 같은 타입이면 더더욱...
빌더는 점층적 생성자보다 코드를 읽고 쓰기가 훨씬 간결하고, 자바빈즈보다 훨씬 안전하다.
