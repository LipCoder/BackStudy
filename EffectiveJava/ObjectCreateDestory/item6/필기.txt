item6
불필요한 객체 생성 피하라

객체 매번 생성 < 객체 하나를 재사용

ex) 
String s = new String("bikini"); // 따라 하지마!

위 코드는 실행될 때마다 String 인스턴스를 새로 만든다.
생성자로 넘겨진 bikini 자체가 이미 String과 기능적으로 완전히 똑같다.
위 코드가 반목문이나 자주 호출되는 메서드 안에 있다면 
"쓸데없는 String 인스턴스가 수백만 개 만들어질 수도 있다."

String s = "bikini"; // 개선된 코드

위 코드는 새로운 인스턴스를 매번 만드는 대신 하나의 String 인스턴스를 사용한다.
이 방식을 사용하면 같은 JVM 안에서 "bikini"와 같은 모든 문자열 리터럴을 사용하는 코드가
같은 객체를 재사용함이 보장된다.

정적 팩터리 메서드를 사용해 불필요한 객체 생성을 피할 수 있음
Boolean(String)         => X
Boolean.valueOf(String) => O


* 생성 비용이 아주 비싼(느린) 객체가 반복하여 필요한 경우
=> 캐싱하여 재사용하길 권장

// 정규 표현식을 사용한 로마 숫자 확인 메서드
static boolean isRomanNumeral(String s) {
    return s.matches("^(?=.)M*(C[MD]|D?C{0,3})"
            + "(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$");
}

위 코드의 문제점 => String.matches 메서드 사용
                    -> 문자열 형태를 확인하는 가장 쉬운 방법이지만,
                        성능이 중요한 상황에서 반복해 사용하기엔 적합하지 않다.
                        (왜? 한번 쓰이면 버려져서 가비지 컬렉션 대상이 됨)
                        (왜? 정규표현식에 해당하는 유한상태머신을 만들어 생성 비요이 높음)

- 해결법
Pattern 인스턴스를 정적 초기화 과정에서 직업 생성해 캐싱
메서드 호출될 때마다 인스턴스를 재사용

public class RomanNumerals {
    private static final Pattern ROMAN = Pattern.compile(
                "^(?=.)M*(C[MD]|D?C{0,3})"
                + "(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$");

    static boolean isRomanNumeral(String s) {
        return ROMAN.matcher(s).matches();
    }   
}

이렇게 개선하면 isRomanNumeral이 빈번히 호출되는 상황에서 성능을 상당히 끌어올릴 수 있다.
개선 전 1.1 마이크로세컨드 ---> 개선 후 0.17 마이크로세컨드 (6.5배 이상 빨라짐)

코드도 더 명확해졌다.
존재조차 몰랐던 Pattern 인스턴스를 static final 필드로 이름을 지어 의미가 더 잘 드러난다.

isRomanNumeral 메서드를 한 번도 호출하지 않는다면 ROMAN은 쓸데없이 초기화 된 꼴..
지연 초기화(lazy initialization)로 불필요한 초기화를 없앨 수 있지만 권하지 않음
코드를 복잡하게 만들기 때문...

* 어댑터
???

* 오토박싱
오토박싱 : 기본 타입과 박싱된 기본 타입을 섞어 쓰는 경우, 자동으로 상호 변환해주는 기술
오토박싱은 두 타입의 구분을 흐려주지만, 완전히 없애 주지는 않는다!
또한 성능도 느리다.

private static long sum() {
    Long sum = 0L;
    for (long i = 0; i <= Integer.MAX_VALUE; i++)
        sum += i;

    return sum;
}

sum 변수를 long이 아닌 Long으로 선언해서 불필요한 Long 인스턴스가 약 2^31개나 만들어졌다.
(long 타입인 i가 Long 타입인 sum에 더해질 때마다...)
long으로 바꿔주면 6.3초에서 0.59초로 빨라짐

결론 : 박싱된 기본 타입보다는 기본 타입을 사용하고, 의도치 않은 오토박싱이 숨어들지 않도록 하자!


* 단순 객체 생성을 피하고자 사용자만의 객체 풀을 만들지 말자..
==> 코드를 헷갈리게 함
==> 메모리 사용량을 늘림
==> 성능을 떨어뜨림
