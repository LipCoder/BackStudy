item7
다 쓴 객체 참조를 해제하라!

처음 JAVA로 넘어온다면 가비지 컬렉터를 갖춘 점에 대해 마법을 보는 듯 할 것이다.
메모리 관리에 전혀 신경쓰지 않아도 된다고 생각할 것이다. 하지만 전혀 그렇지 않다..

ex) Stack.java

해당 코드는 전혀 문제가 없어 보일 것이다..
하지만 숨어있는 문제점이 있는데, 바로 '메모리 누수'이다.

메모리 누수로 인해 발생할 수 있는 문제
=> 성능 저하, 디스크 페이징 혹은 OutOfMemoryError로 인한 프로그램 종료

메모리 누수가 일어나는 위치 -> pop() 
==> 스택에서 꺼내진 객체들을 가비지 컬렉터가 회수 하지 않음...
이유 - 다 쓴 참조(obsolete reference)를 가지고 있기 떄문

* 객체 참조를 null 처리하는 일 ==> 예외적인 경우

* Stack 클래스가 메모리 누수에 취약한 이유? 
1. Stack이 자기 메모리를 직접관리했기 때문
자기 메모리를 직접 관리하는 클래스라면 프로그래머는 상시 메모리 누수에 주의해야 함"

2. 캐시 역시 메모리 누수를 일으키는 주범 => 객체 참조를 캐시에 넣고 잊어먹은채 한참을 그냥 놔두는 경우...
해결법 : WeakHashMap을 사용하여 캐시를 만들자. (외부에서 키를 참조하지 않으면 메모리에서 삭제된다.)

3. 리스너 혹은 콜백
클라이언트에서 콜백을 등록만 하고 명확히 해지하지 않으면, 콜백은 계속 쌓여만 간다. 
해결법 : 약한 참조(weak reference)로 저장하면 가비지 컬렉터가 즉시 수거해감 (WeakHashMap)


# 정리
메모리 누수는 잘 드러나지 않아 수년간 잠복하는 사례도 있음.
이런 누수는 코드 리뷰, 힙 프로파일러 같은 디버깅 도구를 동원 해야만 발견되기도 함
그러므로 예방법을 미리 익혀두는 것이 매우 중요하다.