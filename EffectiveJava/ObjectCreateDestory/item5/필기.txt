item5
자원을 직접 명시하지 말고 의존 객체 주입을 사용하라

많은 클래스가 하나 이상 자원에 의존함.

ex) 맞춤법 검사기
// 정적 유틸리티 클래스
public class SpellChecker {
    private static final Lexicon dictionary = ...;

    private SpellChecker() {}

    public static boolean isValid(Stirng word) { ... }
    public static List<Stirng> suggestions(String typo) { ... }
}

// 싱글턴
public class SpellChecker {
    private final Lexicon dictionary = ...;

    private SpellChecker(...) {}
    public static SpellChecker INSTANCE = new SpellChecker(...);

    public boolean isValid(Stirng word) { ... }
    public List<Stirng> suggestions(String typo) { ... }
}

사전이 여러개라면? 적절하지 않은 방식
* 사용하는 자원에 따라 동작이 달라지는 클래스에는 정적 유틸리니 클래스나 싱글턴 방식이 적합하지 않다. * 
==> 클래스가 여러 자원 인스턴스를 지원하여 원하는 자원을 사용하도록 해야함
        해결방법 : 인스턴스를 생성할때 생성자에 필요한 자원을 넘겨준다.

// 의존 객체 주입은 유연성과 테스트 용이성을 높여준다.
public class SpellChecker {
    private final Lexicon dictionary;

    // private --> public
    public SpellChecker(Lexicon dictionary) {
        this.dictionary = Objects.requireNonNull(dictionary);
    }

    public boolean isValid(Stirng word) { ... }
    public List<Stirng> suggestions(String typo) { ... }
}


* 변형
팩터리 메서드 패턴 (Factory Method Pattern)
팩터리 => 호출될때마다 특정 타입 인스턴스를 반복해서 만들어주는 객체

(Java 8)
Supplier<T> 인터페이스

// 팩터리가 생성한 타일들로 구성된 모자이크를 만드는 메서드
Mosaic create(Supplier<? extends Tile> tileFactory) { ... }

* 의존 객체 주입의 장점
=> 유연성과 테스트 용이성을 개선해준다.

* 의존 객체 주입의 단점
=> 의존성이 수천개 이상되는 큰 프로젝트에서는 코드를 어지럽게 만든다.
    -> 이를 해소하기 위해 대거, 주스, 스프링 같은 의존 객체 주입 프레임웤을 사용


# 정리
클래스 내부적으로 하나의 자원에 의존, 자원이 클래스에 영향을 줌
==> 싱글턴과 정적 유틸리티는 사용하면 안된다!
    (클래스가 자원을 직접 만들도록 해서도 안된다)
대신 필요한 자원을 생성자에 넘겨주자. (의존 객체 주입)