item9
try-finally 보다는 try-with-resources를 사용하라

자바 라이브러리에서 close 메서드로 직접 닫아줘야 하는 자원이 많음
ex) InputStream, OutputStream, java.sql.Connection 등

자원 닫기는 클라이언트 측에서 해줘야 하는데, 놓치기 쉬움. 이는 곧 성능 문제로 이어짐
안전망으로 finalizer를 활용하고는 있지만 그리 믿을만하지 못함


* 전통적인 자원 닫힘 보장 수단 try-finally

// ex1.
static String firstLineOfFile(String path) throws IOException {
    BufferedReader br = new BufferedReader(new FileReader(path));

    try {
        return br.readLine();   // 예외를 던지는 경우 close 메서드 무시
    } finally {
        br.close();
    }
}

// ex2.
// 자원을 하나 더 사용하는 경우
static void copy(String src, String dst) throws IOException {
    InputStream in = new FileInputStream(src);
    try {
        OutputStream out = new FileOutputStream(dst);
        try {
            byte[] buf = new byte[BUFFER_SIZE];
            int n;
            while ((n = in.read(buf)) >= 0)
                out.write(buf, 0, n);
        } finally {
            out.close();
        }
    } finally {
        in.close();
    }
}


이러한 문제들을 해결하기 위해 자바 7에서 try-with-resources 제공한다.

// ex1에 try-with-resources 적용
static String firstLineOfFile(String path) throws IOException {
    try (BufferedReader br = new BufferedReader(
            new FileReader(path))) {
                return br.readLine();
    }
}

// ex2에 try-with-resources 적용
static void copy(String src, String dst) throws IOException {
    try (InputStream in = new FileInputStream(src);
         OutputStream out = new FileOutputStream(dst)) {
             byte[] buf = new byte[BUFFER_SIZE];
             int n;
             while((n = in.read(buf)) >= 0)
                out.write(buf, 0, n);s
         }
}

// catch 절과 함께 사용할 수도 있다.
static String firstLineOfFile(String path, String defaultVal) throws IOException {
    try (BufferedReader br = new BufferedReader(
            new FileReader(path))) {
                return br.readLine();
    } catch (IOException e) {
        return defaultVal;
    }
}

# 정리 
꼭 회수해야 할 자원을 다룰 때는 try-finally 말고, try-with-resources를 사용하자.(예외없음)
코드는 더 짧고 분명해지고, 만들어지는 예외 정보도 훨씬 유용하다. try-finally로 작성하면 
실용적이지 못할 만큼 코드가 지저분해지는 경우라도, try-with-resources로는 정확하고 쉽게 자원을 회수할 수 있다.