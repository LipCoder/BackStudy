item3
private 생성자나 열거 타입으로 싱글턴임을 보증하라.

싱글턴이란?
인스턴스를 오직 하나만 생성할 수 있는 클래스

ex) 무상태 객체, 설계상 유일한 컴포넌트


클래스를 싱글턴으로 만들면 이를 사용하는 클라이언트를 테스트하기가 어려워질 수 있음..
==> 왜? 싱글턴 인스턴스를 mock(테스트를 위한 가짜객체) 구현으로 대체할 수 없음


싱글턴 생성 방식
1) public 필드 방식
public class Elvis {
    public static final Elvis INSTANCE = new Elvis();

    // 초기화시 딱 한번만 호출
    // public, protected 생성자가 없으므로
    // 하나뿐임을 보장한다.
    private Elvis() { ... }

    public void leaveTheBuilding() { ... }
}


2) 정적 팩토리 메서드 방식
public clas Elvis {
    private static final Elvis INSTANCE = new Elvis();
    private Elvis() { ... }
    // 항상 같은 객체 참조를 반환하므로 새로운 인스턴스는 절대 만들어지지 않는다.
    public static Elvis getInstance() { return INSTANCE; }

    public void leaveTheBuilding() { ... }
}


// 가짜 객체 탄생을 예방하는 법
// 싱글턴임을 보장해주는 readResolve 메서드
private Object readResolve() {
    // '진짜' Elvis 반환, 가짜 Elvis 가비지 컬렉터에 맡김
    return INSTANCE;
}


3) 열거타입을 이용
public enum Elvis {
    INSTANCE;

    public void leaveTheBuilding() { ... };
}
==> 퍼블릭 방식과 비슷하지만, 더 간결하고, 추가 노력 없이 직렬화 가능,
    더 복잡한 상황에서도 인스턴스를 다시는 만들지 않음
==> 조금 부자연 스러워 보일 수 있으나 대부분 상황에선 이 방법이 
    싱글턴을 만들기 가장 좋음



item 4
인스턴스화를 막으려거든 private 생성자를 사용하라

단순히 정적 메서드와 정적 필드를 담은 클래스를 만들고 싶은 경우..
ex) java.lang.Math, java.util.Arrays, java.util.Collections, final 클래스 메서드
==> 애초에 이런 클래스는 인스턴스로 만들어 쓰려고 설계한게 아니다.

생성자를 선언하지 않음 -> 디폴트 생성자 생성 -> 인스턴스화 가능 -> 의도대로 동작하지 않음!

private 생성자를 추가하면 클래스의 인스턴스화를 막을 수 있다.

public class UtilityClass {
    // 기본 생성자가 만들어지는 것을 막는다(인스턴스 방지용)
    private UtilityClass() {
        // 클래스 내에서 실수로 생성자를 호출하게 된다면
        // 에러를 던져주도록 구성
        throw new AssertionError();
    }
    ... // 생략
}

생성자 private 선언은 상속을 불가능하게 만드는 기능도 한다.