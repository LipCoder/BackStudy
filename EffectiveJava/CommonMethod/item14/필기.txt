item14
Comparable을 구현할지 고려하라

Comparable => compareTo

compareTo = 동치성 비교 + 순서 비교
Comparable이 있다 => 그 클래스의 인스턴스들에는 자연적인 순서(Natural Order)가 있음

// Comparable을 구현한 객체들의 배열은 다음처럼 손쉽게 정렬할 수 있다.
Arrays.sort(a);

검색, 극단값 계산, 자동 정렬되는 컬렉션 관리를 쉽게 할 수 있다.


// 다음 프로그램이 알파벳순으로 출력이 가능한 이유도
// String이 Comparable을 구현한 덕분이다.
public class WordList {
    public static void main(String[] args) {
        Set<String> s = new TreeSet<>();
        Collections.addAll(s, args);
        System.out.println(s);
    }
}

Comparable을 구현 능력 => 수많은 제네릭 알고리즘과 컬렉션의 힘을 누릴 수 있음
대부분 자바 플랫폼 라이브러리의 모든 값 클래스와 열거 타입이 Comparable로 구현

만약 순서가 명확한 값(알파벳,숫자,연대 등) 클래스를 작성한다면 반드시 Comparable 인터페이스를 구현하자.

// Comparable 인터페이스
public interface Comparable<T> {
    int compareTo(T t);
}

equals 메서드와 다르게, compareTo는 타입이 다른 객체를 신경 쓰지 않아도 된다.
다른 타입이 주어지면 ClassCastException을 던져도 된다.

compareTo는 equals처럼 반사성, 대칭성, 추이성을 충족해야 한다.

컬렉션들은 동치성을 비교할때 equals가 아닌 compareTo를 사용한다.
BigDecimal("1.0")
BigDecimal("1.00")
equals로 위 둘을 비교할 경우 소수점 2째자리에 0이 하나 더 붙은 이유로
hashset이 다르게 잡히기 때문에 서로 다르다는 결과를 도출해낸다.
compareTo로 비교하면 이 둘을 똑같은 인스턴스로 본다.

compareTo는 각 필드가 동치인지를 비교하는게 아니라 그 순서를 비교한다.

Comparable을 구현하지 않은 필드나 표준이 아닌 순서로 비교해야 한다면 비교자를 대신 사용한다.
비교자는 직접 만들거나 자바가 제공하는 것 중 골라 쓰면 된다.

다음은 자바가 제공하는 비교자를 사용하고 있다.
public final class CaseInsensitiveString
        implements Comparable<CaseInsensitiveString> {
    public int compareTo(CaseInsensitiveString cis) {
        return String.CASE_INSENSITIVE_ORDER.compare(s, cis.s);
    }
}
 
 Comparable<CaseInsensitiveString>는 CaseInsensitiveString 참조가 
 CaseInsensitiveString 참조와만 비교할 수 있다는 뜻으로, Comparable을 구현할 때 
 일반적으로 따르는 패턴이다.

 compareTo 메서드에서 관계 연산자(<, >)를 사용하는 이전 방식은 거추장스럽고 오류를 유발하여 
 이제는 추천하지 않는 방식이다.


 클래스의 핵심 필드가 여러 개라면 어느 것을 먼저 비교하느냐가 중요해진다.
 비교 결과가 동일이 아니라, 순서가 결정됐다면 거기서 끝이다. 
 가장 핵심이 되는 필드가 똑같아면, 똑같지 않은 필드를 찾을 때까지 그 다음으로 중요한 필드를 비교해나간다.

 public int copareTo(PhoneNumber pn) {
     int result = Short.compare(areaCode, pn.areaCode);         // 가장 중요한 필드
     if(result == 0) {          
         result = Short.compare(prefix, pn.prefix);              // 두 번째로 줒요한 필드                       
         if(result == 0) {
             result = Short.compare(lineNum, pn.lineNum);       // 세 번째로 중요한 피르\ㄹ
         }
     }
     return result;
 }

이 방식은 약간의 성능 저하가 뒤따른다. 
자바의 정적 임포트 기능을 이용하면 정적 비교자 생성 메서드들을 
그 이름만으로 사용할 수 있어 코드가 훨씬 깔끔해진다.
다음은 이를 compareTo 메서드에 이 방식을 적용한 코드이다.

private static final Comparable<PhoneNumber> COMPARATOR = 
        comparingInt((PhoneNumber pn) -> pn.areaCode)
            .thenComparingInt(pn -> pn.prefix)
            .thenComparingInt(pn -> pn.lineNum);

public int compareTo(PhoneNumber pn) {
    return COMPARATOR.compare(this, pn);
}

해당 코드는 클래스 초기화시 비교자 생성 메서드 2개를 이용해 비교자를 생성한다.
comparingInt는 람다를 인수로 받음. 
람다는 PhoneNumber 지역 코드를 기준으로 전화번호 순서를 정하는 Comparator<PhoneNumber>를 반환
지역 코드가 같은 경우에 대비하여 thenComparingInt 비교 메서드를 사용한다.
thenComparingInt는 Comparator의 인스턴스 메서드로 비교를 거쳐 다시 비교자를 반환한다.
(추가 비교를 수행, 원하는 만큼 연달아서 호출할 수 있음)


다음은 해시코드 값의 차를 기준으로 하는 비교자 코드이다.
static Comparator<Object> hashCodeOrder = new Comparator<>() {
    public int compare(Object o1, Object o2) {
        return o1.hashCode() - o2.hashCode();
    }
};

이 방식은 사용하면 안됨 
-> 정수 오버플로 발생 가능성
-> 부동소수점 계산 방식에 따른 오류 발생 가능성

해결 방법 두가지
// 정적 compare 메서드를 활용한 비교자
static Comparator<Object> hashCodeOrder = new Comparator<>() {
    public int compare(Object o1, Object o2) {
        return Integer.Compare(o1.hashCode(), o2.hashCode());
    }
};

// 비교자 생성 메서드를 활용한 비교자
static Comparator<Object> hashCodeOrder =  
        Comparator.comparingInt(o -> o.hashCode());


# 요약
순서를 고려해야 하는 값 클래스를 작성한다면 꼭 Comparable 인터페이스를 구현한다.
이를통해 그 인스턴스를 쉽게 정렬하고, 검색하고, 비교 기능을 제공하는 컬렉션과 어우러지도록 해야 한다.
compareTo 메서드에서 필드의 값을 비교할 때 비교연산자는 쓰지 말아야 한다. 
대신 박싱된 기본 타입 클래스가 제공하는 정적 compare 메서드나 Comparator 인터페이스가 제공하는 비교자 생성 메서드를 사용하자